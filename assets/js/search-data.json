{
  
    
        "post0": {
            "title": "Program Funciton and Purpose / Program Design and Development Notes",
            "content": "1.2 Program Function and Purpose . Computing Innovations: Applications= games, social media, business, productivity | Physical Devices= computers, smart phones, smart “things”, and wearables | Systems= E-commerce, cloud services, e-mail | . | Questions to ask: Why does the computing innovation exist? | What problem(s) does the computing innovation solve? | What does the computing innovation allow us to do that we would not do before? | . | Identifying Inputs to Programs: Computer Programs accept input in a variety of different forms: -tactile (touch) -audio -visual -text (incuding numerical values) | . | How do programs recieve input? most programs are written in an event driven environment “events” are triggered by some action, which usually sends input to the program (mouse clciks, screen taps/swipes, physical button clicks, keyboard entries, audio trigger) | . | . | input usually affects the output What are outputs produced by a device?= visual, audio, tactile, text | what sort of output do your devices supply?= smart phone, laptop computer, gaming console | . | an action triggers an event: action may be initialized by the user or another program/device | the program “jumps” to the code segement according to the event: the code segment is executed, output is triggered by the code segement | the program code is not necessarily executed “in order”: code segements are executed as they are called, according to evetns triggered | What is a program?= a collection of statements, a group of statements= code segment, executed according to the rules of the programming language (software) | . | description: simply state what it does (so someone could use the segment in larger program) | how it does what it dows (explain in detail the code) | . | . 1.3 Program Design and Development . Developers decide on the program requirements that: describe how a program should behave, include list of user interactions, specifications outline of all requirements | How is a program developed? program developmet is rarely a solo endeavor | usually developed by teams of people | individuals/teams wrk on different functional components | each member of the project deserves to recieves credit for their work | their names must be written in the documentation of the program indicating their contributions to the project | Giving credit: use comments, assign who fixes a problem, include author’s name and the source of any code segments being used | . | . . Difficulties . I need to study the different functions and get used to identifying what is occuring in code. | .",
            "url": "https://avac54765.github.io/fastpages-ava/1.2-1.3notes/markdown",
            "relUrl": "/1.2-1.3notes/markdown",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Learning to work with Javascript.",
            "content": "| Overview | Javascript Table | . . console.log(&quot;Mr. Mortensen is cool!&quot;); // console.log displays the parameter (hello word) in the console . Mr. Mortensen is cool! . var msg = &quot;Mr. Mortensen is cool&quot;; // This is defining the message as a variable to be used in the console.log funciton console.log(msg); . Mr. Mortensen is cool . function logIt(output) { // this is defining a function, named logIt console.log(output); } logIt(msg); . Mr. Mortensen is cool . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); // calls a string logIt(2022) // calls a number . Reuse of logIT Hello, Students! 2022 . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); //typeof= type of object } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Looking at dynamic nature of types in JavaScript string ; hello number ; 2020 object ; [ 1, 2, 3 ] . // define a function to hold data for a Person function Person(name, ghID, classOf, haircolor, favfood) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.haircolor= haircolor; this.favfood= favfood; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, haircolor: this.haircolor, favfood: this.favfood, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977, &quot;blue&quot;, &quot;pasta&quot;); teacher.setRole(&quot;Teacher&quot;); // output of Object and JSON/string associated with Teacher logItType(teacher); // object type is easy to work with in JavaScript logItType(teacher.toJSON()); // json/string is useful when passing data on internet . object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, haircolor: &#39;blue&#39;, favfood: &#39;pasta&#39;, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;haircolor&#34;:&#34;blue&#34;,&#34;favfood&#34;:&#34;pasta&#34;,&#34;role&#34;:&#34;Teacher&#34;} . // define a student Array of Person(s) var students = [ new Person(&quot;Anthony&quot;, &quot;tonyhieu&quot;, 2022, &quot;pink&quot;, &quot;pizza&quot;), new Person(&quot;Bria&quot;, &quot;B-G101&quot;, 2023, &quot;blonde&quot;, &quot;dirt&quot;), new Person(&quot;Allie&quot;, &quot;xiaoa0&quot;, 2023, &quot;ginger&quot;, &quot;apples&quot;), new Person(&quot;Tigran&quot;, &quot;Tigran7&quot;, 2023, &quot;black&quot;, &quot;chocolate&quot;), new Person(&quot;Rebecca&quot;, &quot;Rebecca-123&quot;, 2023, &quot;grey&quot;, &quot;sushi&quot;), new Person(&quot;Vidhi&quot;, &quot;unknown&quot;, 2024, &quot;green&quot;, &quot;urmom&quot;) ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, haircolor: &#39;blue&#39;, favfood: &#39;pasta&#39;, role: &#39;Teacher&#39; }, Person { name: &#39;Anthony&#39;, ghID: &#39;tonyhieu&#39;, classOf: 2022, haircolor: &#39;pink&#39;, favfood: &#39;pizza&#39;, role: &#39;Student&#39; }, Person { name: &#39;Bria&#39;, ghID: &#39;B-G101&#39;, classOf: 2023, haircolor: &#39;blonde&#39;, favfood: &#39;dirt&#39;, role: &#39;Student&#39; }, Person { name: &#39;Allie&#39;, ghID: &#39;xiaoa0&#39;, classOf: 2023, haircolor: &#39;ginger&#39;, favfood: &#39;apples&#39;, role: &#39;Student&#39; }, Person { name: &#39;Tigran&#39;, ghID: &#39;Tigran7&#39;, classOf: 2023, haircolor: &#39;black&#39;, favfood: &#39;chocolate&#39;, role: &#39;Student&#39; }, Person { name: &#39;Rebecca&#39;, ghID: &#39;Rebecca-123&#39;, classOf: 2023, haircolor: &#39;grey&#39;, favfood: &#39;sushi&#39;, role: &#39;Student&#39; }, Person { name: &#39;Vidhi&#39;, ghID: &#39;unknown&#39;, classOf: 2024, haircolor: &#39;green&#39;, favfood: &#39;urmom&#39;, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;haircolor&#34;:&#34;blue&#34;,&#34;favfood&#34;:&#34;pasta&#34;,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, haircolor: &#39;blue&#39;, favfood: &#39;pasta&#39;, role: &#39;Teacher&#39; } . IJavaScript and Table formatting using toHTML method . The 3-part JavaScript in the _toHTML method Style part is building CSS inline formatting | Body part is constructing the Table Rows (tr), Table Headings (th), and Table Data (td). The table data is obtained from a Classroom object. The JavaScript for loop allows the construction of a new row of data for each person object in the Array. | Return part creates the HTML fragment for rendering | . | . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;background:#7E006C;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Hair Color&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Favorite Food&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.haircolor + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.favfood + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDClass OfHair ColorFavorite FoodRole . Mr M | jm1021 | 1977 | blue | pasta | Teacher | Anthony | tonyhieu | 2022 | pink | pizza | Student | Bria | B-G101 | 2023 | blonde | dirt | Student | Allie | xiaoa0 | 2023 | ginger | apples | Student | Tigran | Tigran7 | 2023 | black | chocolate | Student | Rebecca | Rebecca-123 | 2023 | grey | sushi | Student | Vidhi | unknown | 2024 | green | urmom | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . . .",
            "url": "https://avac54765.github.io/fastpages-ava/learningjavascript/javascript",
            "relUrl": "/learningjavascript/javascript",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "The Scrum Process",
            "content": ". The Scrum Roles . Below are the roles of our members for sprints and teamwork oriented projects. . Name Role Job Description . Ava Carlson | Scrum Master | Helps to facilitate the sprint by ensuring that an agile framework is followed; Committed to tracking issues and maintaining scrum boards, but should also remain flexible and open to opportunities for the team to improve their workflow. | . Alexa Carlson | Frontend Developer | A front-end developer builds the front-end portion of websites and web applications—that is, the part that users actually see and interact with. | . Shruthi Damodar | DevOps | DevOps is the combination of cultural philosophies, practices, and tools that increases an team’s ability to deliver applications and services at high velocity: version control, integration, managing dependencies (requirements.txt), AWS deployment are some of the key functions that impact velocity. | . Antony Yu | Backend Developer | Back-end developers a build and maintain the mechanisms that process data and perform actions like data storage, security, and other server-side functions that you cannot see. | . You can access our scrum board here. .",
            "url": "https://avac54765.github.io/fastpages-ava/scrum_process/markdown",
            "relUrl": "/scrum_process/markdown",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "My Group's Collaboration",
            "content": "Here’s What my Group Did . called each other to talk about the objective of our videos | created a shared document that outlines goals and needs | wrote steps together of what we should do and steps for creating a video | included comments at the bottom of this document for feedback for future videos | . Want to See this Document? . Click here to see group collaboration document. .",
            "url": "https://avac54765.github.io/fastpages-ava/groupcollaboration/markdown",
            "relUrl": "/groupcollaboration/markdown",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Learning to Collaborate",
            "content": "Learning to Collaborate . Goals: . Explain how computing innovations are improved through collaboration. | Demonstrate effective interpersonal skills during collaboration. | Explain how computing innovations are improved through collaboration. | Explain hoe computing innovations are developed by groups of people. | . Unit 1.1 Collegeboard Collaboration Video Notes . Effective collaboration produces a computing innovation that reflects the diversity of talents and perspectives of those who designed it. . | A computing innovation includes a program as an integral part of its function. . | A computing innovation can be physical (self-driving car), nonphysical computing software (picture editing software), or a nonpyuhiscal computing concept (e-commerce). . | Collaboration that includes diverse perspectives helps avoid bias in the development of computing innovations. . | . Interpersonal Skills Learned: . Effective collaboration helps with communication, consensus building, conflict resolution, and negociation skills. | . Unit 1.1 Video Two Notes . on and communication with users are important aspects of the development of computing innovations. . | Information gathered from potential users can be used to understand the purpose of a program from diverse perspectives and to develop a program that fully incorporates these perspectives. . | Online tools support collaboration by allowing programmers to share and provide feedback on ideas and documents. . | Common models such as pair programming exist to facilitate collaboration. . | pair programming= two programmers work together as a pair- one writes the code (driver) while the other reviews each line as being typed in (navigator) . | Think-Pair-Share= students think through a problem alone, pair with a partner to share ideas, and then share results with the class . | helpful idea= leave comments in code! . | . Taking the Collegeboard Quizzes . Program Purpose and Function Quiz . . Collaboration Quiz . .",
            "url": "https://avac54765.github.io/fastpages-ava/collaboration/markdown",
            "relUrl": "/collaboration/markdown",
            "date": " • Sep 13, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Making a Quiz on App Lab",
            "content": "The Design Process . . Picking a theme . I first picked out a theme I was interested in to create my quiz. I chose Spiderman as my theme. . | Writing my Questions . My three questions on my app will be: How many Spidermans are there in the cinematic universe?, Who is the best Spiderman?, and Which Spiderman said “I love you” to the other Spidermans in the Spiderman movie, No Way Home? . | Designing my Quiz. . I decided that there will be a home page with an image of Tom Holland as spiderman. When you click a “start” button, the app will direct you to the first question and page. When you answer it will then direct you to the next question and so on. At the very end, the quiz will have four pages: a 100% success page, a 66% success page, a 33% success page, and a 0% success page. The user will be directed to whatever page they scored on the quiz. . | Executing my Quiz . I first developed by quiz by making all the different screens I would need and naming them. I then started uploading images and adding text, buttons, and titles. After designing most of my screens, I started experimenting with the code. I added console logs to let the programer know what is happening during the quiz. After simply getting each question after another and using on events to get answers, I started getting fancier. I decided to use an if/else statement for my first question with an imput from the user. If the user gets the question right (checked with a variable), then the quiz will direct to the next quesiton. If they get it wrong, it goes to a screen saying they are incorrect. I also decided to keep track of the user’s score using another variable and adding one to the score everytime the user gets an answer correct. The score shows at the very end. My final addition was setting a timeout of two seconds after a user answers a question. The screen shows a message to the user for two seconds before moving on to the next page. . | You Can View My Quiz Here! . Spiderman Quiz . Here’s What Worked . I learned a great deal about Javascript for the first time. I liked using the App Lab because I could see the code also in text form but was able to easily use the boxes. | I figured out how to use different features on the App Lab such as timeouts, on events, if/else functions, and defining variables in Javascript. | My quiz ended up working well and the score at the end is the correct ouput (I had to problem solve this). | . Improvement for Next Time . My on events and code are a bit repetitive. I would try and figure out how to simplify my code maybe by defining functions to use less on events. If I use the same formatting on every screen, I may be able to simplify my code even further. | I would like to experiment with the other functions in App Lab. There are a lot of features I haven’t had the chance to explore yet. | I started off by using text input when adding my titles and questions. I then learned I should use text area instead. But once I was mostly done designing my quiz, I learned that I should be using text labels and not text areas so that the user is unable to edit the text. | . Performance Task Skills . Program Purpose and Function . The purpose of this program is to test and teach users about Spiderman and my opinions about Spiderman. | This program uses Javascript to walk a user through a quiz. The user answers various questions and is directed to different screens, receiving a score at the end. | In this quiz, the user provides both text input and mouse clicks. The output consists of questions that are displayed on different screens and a final score at the end. | . | Data Abstraction . In this assignment, I used App Lab on code.org, which is programmed to be simple. The code generated through App Lab did not generate a list or other collection type. I did not see a need to code a list into my simple quiz. | . | Managing Complexity . I did not make a list in my code for my simple quiz. Although, if I were to simplify my quiz, I would create a list of my questions and answers and figure out how to access that list to have less on events in my code. | . | Procedural Abstraction . In my App Lab, I did not define any new functions that were not already in the code toolbox. During this project, I was learning how to use Javascript and the app toolbox to build a simple quiz. You can see an example of my student-devloped procedures in my python bread quiz linked in my home page. | . | Algorithim Implementation . In my quiz, I am using sequencing and selection. . sequencing: I use sequencing in my quiz when I list out all of my events in a specific order to occur. I do not have any lists in my code so I am not using iteration. For an example, my quiz starts with question one, then question two and so on. . | selection: I use selection when I coded my if/else statement. If someone chose the correct answer, then they had a point added to their score and got to move to the next question. If they did not answer correctly, they were directed to in incorrect screen. This is selection because it is not a specific list of instructions in a specific order. . | . | Testing . I tested out different variations of my quiz that users may experience. All variations direct to the correct pages and end with a correctly calculated score. Feel free to test out my quiz in the link above. . |",
            "url": "https://avac54765.github.io/fastpages-ava/app_lab_quiz/markdown",
            "relUrl": "/app_lab_quiz/markdown",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Fibonacci's Sequence with a Recursive Loop",
            "content": "def fibonacci_loop(n): if n &lt;= 1: return n #you must return n if n&lt;=1 otherwise term will be negative else: return(fibonacci_loop(n-1) + fibonacci_loop(n-2)) nterms= 10 #the user can put a term number in here and this loop will list the terms in the fibonacci sequence until that term if nterms &lt;= 0: #term cannot be negative print(&quot;Please enter a positive integer. Negatives are not accepted.&quot;) else: for i in range(nterms): #if the integer is positive, the function will be able to list until &quot;n&quot;th term print(fibonacci_loop(i)) . 0 1 1 2 3 5 8 13 21 34 .",
            "url": "https://avac54765.github.io/fastpages-ava/fibonacci/python",
            "relUrl": "/fibonacci/python",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Trimester One Vocabulary",
            "content": "vocablist={&quot;key:value&quot; : &quot;value defines the key&quot;, &quot;variable&quot; : &quot;Stores information (ex. i=0) for a computer program. Types: string, integer, float&quot;, &quot;concatenation&quot; : &quot;the linking or joining of two characters or character strings together to create a phrase or compound word.&quot;, &quot;procederal abstraction&quot; : &quot;taking little pieces of information/code and putting them into a different place to become a bigger system&quot;, &quot;representation data&quot; : &quot;Data Representation refers to the form in which data is stored, processed, and transmitted.&quot;, &quot;html fragments&quot; : &quot;Writing allows you to define a block of HTML that you can then embed in your document at key locations.&quot;} for word in vocablist: print(word,&quot;: &quot;, vocablist[word]) . key:value : value defines the key variable : Stores information (ex. i=0) for a computer program. Types: string, integer, float concatenation : the linking or joining of two characters or character strings together to create a phrase or compound word. procederal abstraction : taking little pieces of information/code and putting them into a different place to become a bigger system representation data : Data Representation refers to the form in which data is stored, processed, and transmitted. html fragments : Writing allows you to define a block of HTML that you can then embed in your document at key locations. .",
            "url": "https://avac54765.github.io/fastpages-ava/tri1vocab/python",
            "relUrl": "/tri1vocab/python",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Changing my Site's Theme",
            "content": "Switching from Minima to Architect . . To swtich my theme, I first replaced the remote theme from “Jekyll/minima” to “pages-themes/architect@v0.2.0”. . . Positive Effects of this New Theme . This new theme offered many cool features on my blog. . Made the preview images for posts larger drawing more attention. | . . Post formating is cool with blue coloring and font changes. | . . The comments work the same and are fully functional at the bottom of every post. | . . Negative Effects of this New Theme . This theme also caused issues with my fastpage. . Made my text on my home page very large. | . . User unable to access different pages. This means the user is only able to acess my home page and posts, but is unable to access helpful resources, my about me page, my tags, and loses the ability to search the website. | . . The table formatting changed and is slightly harder to read. It looks less professional in my opinion. | . . The text color on the blue post titles make the text harder to read. | . .",
            "url": "https://avac54765.github.io/fastpages-ava/theme_change/markdown",
            "relUrl": "/theme_change/markdown",
            "date": " • Sep 1, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Making Lists, Dictionaries, Iteration",
            "content": "Making a List with Dictionaries . This is my list of keys and values describing my sister and me. I define these keys and values for future use in my loops. | . avalist = [] # Append to list a dictionary of keys and values about Ava avalist.append({ &quot;FirstName&quot;: &quot;Ava&quot;, &quot;LastName&quot;: &quot;Carlson&quot;, &quot;DOB&quot;: &quot;May 16&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;avabrynncheer@gmail.com&quot;, &quot;FavFoods&quot;: [&quot;mac and cheese&quot;, &quot;strawberries&quot;, &quot;chocolate&quot;], &quot;FamilyNames&quot;: [&quot;Neil&quot;, &quot;Leslie&quot;, &quot;Dylan&quot;, &quot;Grant&quot;, &quot;Alexa&quot;, &quot;Ava&quot;] }) # Append to list a 2nd Dictionary of key/values about Alexa avalist.append({ &quot;FirstName&quot;: &quot;Alexa&quot;, &quot;LastName&quot;: &quot;Carlson&quot;, &quot;DOB&quot;: &quot;May 16&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;alexarosecarlson@icould.com&quot;, &quot;FavFoods&quot;: [&quot;pineapple&quot;, &quot;pasta&quot;, &quot;ice cream&quot;], &quot;FamilyNames&quot;: [&quot;Neil&quot;, &quot;Leslie&quot;, &quot;Dylan&quot;, &quot;Grant&quot;, &quot;Alexa&quot;, &quot;Ava&quot;] }) # Print avalist print(avalist) . [{&#39;FirstName&#39;: &#39;Ava&#39;, &#39;LastName&#39;: &#39;Carlson&#39;, &#39;DOB&#39;: &#39;May 16&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;avabrynncheer@gmail.com&#39;, &#39;FavFoods&#39;: [&#39;mac and cheese&#39;, &#39;strawberries&#39;, &#39;chocolate&#39;], &#39;FamilyNames&#39;: [&#39;Neil&#39;, &#39;Leslie&#39;, &#39;Dylan&#39;, &#39;Grant&#39;, &#39;Alexa&#39;, &#39;Ava&#39;]}, {&#39;FirstName&#39;: &#39;Alexa&#39;, &#39;LastName&#39;: &#39;Carlson&#39;, &#39;DOB&#39;: &#39;May 16&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;alexarosecarlson@icould.com&#39;, &#39;FavFoods&#39;: [&#39;pineapple&#39;, &#39;pasta&#39;, &#39;ice cream&#39;], &#39;FamilyNames&#39;: [&#39;Neil&#39;, &#39;Leslie&#39;, &#39;Dylan&#39;, &#39;Grant&#39;, &#39;Alexa&#39;, &#39;Ava&#39;]}] . Making a Loop . In this loop, I am having the function print line by line each key and value. | . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) # adding an indent print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) print(&quot; t&quot;, &quot;Email:&quot;, d_rec[&quot;Email&quot;]) print(&quot; t&quot;, &quot;Favorite Foods: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;FavFoods&quot;])) # join prints values together print(&quot; t&quot;, &quot;Family Names: &quot;, end=&quot;&quot; ) print(&quot;, &quot;.join(d_rec[&quot;FamilyNames&quot;])) print() def for_loop(): print(&quot;For loop output n&quot;) for record in(avalist): print_data(record) for_loop() . For loop output Ava Carlson Birth Day: May 16 Residence: San Diego Email: avabrynncheer@gmail.com Favorite Foods: mac and cheese, strawberries, chocolate Family Names: Neil, Leslie, Dylan, Grant, Alexa, Ava Alexa Carlson Birth Day: May 16 Residence: San Diego Email: alexarosecarlson@icould.com Favorite Foods: pineapple, pasta, ice cream Family Names: Neil, Leslie, Dylan, Grant, Alexa, Ava . Reversing my Loop . I reveresed my loop here by adding &quot;reversed&quot; in front of my list when prompted to print. | . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) # adding an indent print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) print(&quot; t&quot;, &quot;Email:&quot;, d_rec[&quot;Email&quot;]) print(&quot; t&quot;, &quot;Favorite Foods: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;FavFoods&quot;])) # join prints values together print(&quot; t&quot;, &quot;Family Names: &quot;, end=&quot;&quot; ) print(&quot;, &quot;.join(d_rec[&quot;FamilyNames&quot;])) print() def for_loop(): print(&quot;For loop output reversed n&quot;) for record in reversed(avalist): #adding reversed reverses the records listed print_data(record) for_loop() . For loop output reversed Alexa Carlson Birth Day: May 16 Residence: San Diego Email: alexarosecarlson@icould.com Favorite Foods: pineapple, pasta, ice cream Family Names: Neil, Leslie, Dylan, Grant, Alexa, Ava Ava Carlson Birth Day: May 16 Residence: San Diego Email: avabrynncheer@gmail.com Favorite Foods: mac and cheese, strawberries, chocolate Family Names: Neil, Leslie, Dylan, Grant, Alexa, Ava . Making a While Loop . In this loop, I am defining a variable and while the variable is less than the length of my list, the funtion will continue to run. | . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(avalist): #len= the length of my list record = avalist[i] print_data(record) i += 1 return while_loop() . While loop output Ava Carlson Birth Day: May 16 Residence: San Diego Email: avabrynncheer@gmail.com Favorite Foods: mac and cheese, strawberries, chocolate Family Names: Neil, Leslie, Dylan, Grant, Alexa, Ava Alexa Carlson Birth Day: May 16 Residence: San Diego Email: alexarosecarlson@icould.com Favorite Foods: pineapple, pasta, ice cream Family Names: Neil, Leslie, Dylan, Grant, Alexa, Ava . Reversing my While Loop . I reversed this loop by switching my variable for i, and making the function subtract one from i every loop to condown instead of up. | . def while_loop(): print(&quot;While loop output n&quot;) i = len(avalist) #the function starts at the length of my list while i &gt; 0: record = avalist[i-1] print_data(record) i -= 1 #here the loop is counting down return while_loop() . While loop output Alexa Carlson Birth Day: May 16 Residence: San Diego Email: alexarosecarlson@icould.com Favorite Foods: pineapple, pasta, ice cream Family Names: Neil, Leslie, Dylan, Grant, Alexa, Ava Ava Carlson Birth Day: May 16 Residence: San Diego Email: avabrynncheer@gmail.com Favorite Foods: mac and cheese, strawberries, chocolate Family Names: Neil, Leslie, Dylan, Grant, Alexa, Ava . Making a Recursion loop . In this loop, I am plugging in a term (the number record) into my function so the function can print its data. The term plugged in will increase every time the function loops. | . def recursive_loop(i): if i &lt; len(avalist): record = avalist[i] print_data(record) recursive_loop(i + 1) #the function is adding one to i every time it loops return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output Ava Carlson Birth Day: May 16 Residence: San Diego Email: avabrynncheer@gmail.com Favorite Foods: mac and cheese, strawberries, chocolate Family Names: Neil, Leslie, Dylan, Grant, Alexa, Ava Alexa Carlson Birth Day: May 16 Residence: San Diego Email: alexarosecarlson@icould.com Favorite Foods: pineapple, pasta, ice cream Family Names: Neil, Leslie, Dylan, Grant, Alexa, Ava . Reversing my Recursive Loop . Here I reversed my loop by starting at the length of my list and subtracting one from i until it is at zero. | . def recursive_loop(i): if i &gt;= 0: record = avalist[i] print_data(record) recursive_loop(i - 1) #here is my function subracting one everytime return print(&quot;Recursive loop output reversed n&quot;) recursive_loop(len(avalist)-1) #here is my starting point . Recursive loop output reversed Alexa Carlson Birth Day: May 16 Residence: San Diego Email: alexarosecarlson@icould.com Favorite Foods: pineapple, pasta, ice cream Family Names: Neil, Leslie, Dylan, Grant, Alexa, Ava Ava Carlson Birth Day: May 16 Residence: San Diego Email: avabrynncheer@gmail.com Favorite Foods: mac and cheese, strawberries, chocolate Family Names: Neil, Leslie, Dylan, Grant, Alexa, Ava .",
            "url": "https://avac54765.github.io/fastpages-ava/lists_and_dictionaries/python",
            "relUrl": "/lists_and_dictionaries/python",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Helpful Videos",
            "content": "Topic Link . Creating your Fastpage | https://www.youtube.com/watch?v=sepml4GLLSM. | . Github Basics | https://www.youtube.com/watch?v=phGdqJB6ep0. | .",
            "url": "https://avac54765.github.io/fastpages-ava/videos",
            "relUrl": "/videos",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Helpful Posts",
            "content": "Topic Link . Setting Up Tools | https://nighthawkcoders.github.io/APCSP/techtalk/tools. | . Using Bash | https://nighthawkcoders.github.io/APCSP/techtalk/bash | . More About Fastpages | https://nighthawkcoders.github.io/APCSP/techtalk/fastpages | . What’s Python? | https://nighthawkcoders.github.io/APCSP/week/1 | . HTML Fragments | https://nighthawkcoders.github.io/APCSP/techtalk/html | . What’s JavaScript? | https://nighthawkcoders.github.io/APCSP/techtalk/javascript | . Using Code.org | https://nighthawkcoders.github.io/APCSP/techtalk/applab | .",
            "url": "https://avac54765.github.io/fastpages-ava/helpfulposts",
            "relUrl": "/helpfulposts",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Key Tools Check",
            "content": "Checking for Conda Packages . conda list . # packages in environment at /home/avac54765/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . echo Conda Check # this tells the user that they are checking for kernal installation test=&quot;jupyter&quot; check=`conda list | grep $test` n=${#check} if [[ ${n} &gt; 0 ]]; then echo &quot;$check&quot; else echo &quot;$test not found&quot; fi #if, then, else, fi= tests for installation uses a fallback if the test fails . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . Checking for Python . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Checking for Jupyter Installations . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.4.0 ipykernel : 6.15.1 ipywidgets : not installed jupyter_client : 7.3.4 jupyter_core : 4.11.1 jupyter_server : not installed jupyterlab : not installed nbclient : not installed nbconvert : not installed nbformat : not installed notebook : not installed qtconsole : not installed traitlets : 5.3.0 Available kernels: bash /home/avac54765/.local/share/jupyter/kernels/bash javascript /home/avac54765/.local/share/jupyter/kernels/javascript python3 /home/avac54765/.local/share/jupyter/kernels/python3 . test=&quot;python3&quot; check=`jupyter kernelspec list | grep $test` n=${#check} if [[ ${n} &gt; 0 ]]; then echo &quot;$check&quot; else echo &quot;$test not found&quot; fi #if, then, else, fi= tests for installation uses a fallback if the test fails . python3 /home/avac54765/.local/share/jupyter/kernels/python3 .",
            "url": "https://avac54765.github.io/fastpages-ava/tools_check/bash",
            "relUrl": "/tools_check/bash",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "What Kind of Bread are You?",
            "content": "Welcome to the quiz, What Type of Bread are You? Answer the questions below. . white_bread = 0 flat_bread = 0 sourdough_bread = 0 #defines variables for types of breads and point values def question_and_3_answers(prompt, ans1, ans2, ans3): answer_correct = 0 while answer_correct == 0: print(&quot;Question: &quot; + prompt) rsp = input() if rsp == ans1: global white_bread white_bread += 1 answer_correct = 1 elif rsp == ans2: global sourdough_bread sourdough_bread += 1 answer_correct = 1 elif rsp == ans3: global flat_bread flat_bread += 1 answer_correct = 1 else: print(rsp + &quot; is not an answer please try again&quot;) #this is defining my function. I have a prompt and three correct answers- This way I don&#39;t have to type this code five times. #if the user types a non-answer, it will loop until they choose a defined answer. Certain answers will add a point to the bread total question_and_3_answers(&quot;What type of friend are you? The mom, rebellious, or quiet friend? Answer with one word.&quot;, &quot;mom&quot;, &quot;rebellious&quot;, &quot;quiet&quot;) question_and_3_answers(&quot;What kind of car would you drive? A minivan, Tesla, or Prius? Make sure to type a capital letter if applicable.&quot;, &quot;minivan&quot;, &quot;Tesla&quot;, &quot;Prius&quot;) question_and_3_answers(&quot;What activity would you do in your freetime? Would you run errands, party, or read?&quot;, &quot;run errands&quot;, &quot;party&quot;, &quot;read&quot;) question_and_3_answers(&quot;What kind of phone do you use? A flip phone, an iphone, or an android?&quot;, &quot;flip phone&quot;, &quot;iphone&quot;, &quot;android&quot;) question_and_3_answers(&quot;What pet would you like to own? A cat, a dog, or a fish?&quot;,&quot;cat&quot;,&quot;dog&quot;,&quot;fish&quot;) print(&quot;Here are your results: &quot; + str(white_bread) + &quot;/5 whitebread &quot; + str(sourdough_bread) + &quot;/5 sourdough &quot; + str(flat_bread) + &quot;/5 flatbread&quot;) print(&quot;Thanks for playing! Now you can live your life knowing your bread genetics! :)&quot;) #this gives the user results about how much of each bread they are . Question: What type of friend are you? The mom, rebellious, or quiet friend? Answer with one word. Question: What kind of car would you drive? A minivan, Tesla, or Prius? Make sure to type a capital letter if applicable. mom is not an answer please try again Question: What kind of car would you drive? A minivan, Tesla, or Prius? Make sure to type a capital letter if applicable. Question: What activity would you do in your freetime? Would you run errands, party, or read? Question: What kind of phone do you use? A flip phone, an iphone, or an android? Question: What pet would you like to own? A cat, a dog, or a fish? Here are your results: 1/5 whitebread 2/5 sourdough 2/5 flatbread Thanks for playing! Now you can live your life knowing your bread genetics! :) .",
            "url": "https://avac54765.github.io/fastpages-ava/bread_quiz/python",
            "relUrl": "/bread_quiz/python",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "This is my First Jupyter Notebook",
            "content": "print (&quot;Hello I hope you are having a great day!&quot;) . Hello I hope you are having a great day! . Let&#39;s Test Some More Code . print (&quot;hello, world!&quot;) . hello, world! .",
            "url": "https://avac54765.github.io/fastpages-ava/first_jupyter_notebook/python",
            "relUrl": "/first_jupyter_notebook/python",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Ava's First Markdown",
            "content": "Ava’s Favorite Things . Kraft Mac and Cheese | The color pink | My dog Mocha | Cheerleading | ASB | . Ava’s Life in Emojis: . :heart::dog::v::dancers::muscle::hankey::wave::sparkling_heart: . .",
            "url": "https://avac54765.github.io/fastpages-ava/first_markdown/markdown",
            "relUrl": "/first_markdown/markdown",
            "date": " • Aug 22, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "Frontend",
          "content": "| Overview | Javascript Table | . Code in this Sub Menu . In this submenu, I have a link to my use of Javascript. In this post, I discover the use of HTML tables, Javascript, JSON, converting Javascript to HTML segments, and more. .",
          "url": "https://avac54765.github.io/fastpages-ava/frontend/overview",
          "relUrl": "/frontend/overview",
          "date": ""
      }
      
  

  

  
      ,"page2": {
          "title": "APCSP Resources",
          "content": "Format Links . Videos | link to video resources. | . Posts | link to post resources | . .",
          "url": "https://avac54765.github.io/fastpages-ava/resources",
          "relUrl": "/resources",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "About Me",
          "content": "My Family . . Marvel Love . . Spiderman is the best superhero, and Tom Holland is the best Spiderman. Spiderman No Way Home is my favorite movie and made me cry like five times during the movie. .",
          "url": "https://avac54765.github.io/fastpages-ava/aboutava",
          "relUrl": "/aboutava",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
      ,"page9": {
          "title": "My Weekly Work",
          "content": "Trimester 1 Work . Here is all of my APCSP work for every week. Have fun looking through Ava’s struggles and successes. :) . Week Projects . 0 | My First Jupyter Notebook,—&gt; My First Markdown. | . 1 | My Bread Quiz (Python),—&gt; Key Tools Check. | . 2 | Changing my Theme,—&gt; Lists, Dictionaries, Iteration. | . 3 | Making a Quiz on App Lab | . 4 | Learning to Collaborate,—&gt; My Group’s Collaboration. | . 5 | Learing Javascript, —&gt; Scrum Process. | .",
          "url": "https://avac54765.github.io/fastpages-ava/my_work",
          "relUrl": "/my_work",
          "date": ""
      }
      
  

  
  

  
  

  

  
  

  
      ,"page14": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://avac54765.github.io/fastpages-ava/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}